{"version":3,"sources":["components/GetWeather.js","App.js","reportWebVitals.js","index.js"],"names":["GetWeather","useState","weather","updateWeather","zipcode","updateZipcode","console","log","className","class","htmlFor","type","id","placeholder","value","onChange","e","target","onClick","fetch","then","res","json","catch","err","error","undefined","location","name","region","current","condition","text","feelslike_f","gust_mph","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAyDeA,EAvDI,WACf,MAAiCC,mBAAS,IAA1C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAiCF,qBAAjC,mBAAOG,EAAP,KAAgBC,EAAhB,KAmBA,OAFAC,QAAQC,IAAIL,GAGR,gCACI,oBAAIM,UAAU,aAAd,iFACA,sBAAKC,MAAM,OAAX,UACI,uBAAOC,QAAQ,WAAWF,UAAU,wBAApC,2BACA,uBAAOG,KAAK,SAASH,UAAU,eAAeI,GAAG,WAAWC,YAAY,UAAUC,MAAOV,EAASW,SAvB9G,SAAuBC,GACnBX,EAAcW,EAAEC,OAAOH,UAuBf,wBAAQI,QApBpB,WAEIC,MADU,oFAAsFf,EAAtF,WAETgB,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAE,GACHnB,EAAcmB,MAEjBC,OAAM,SAAAC,GACHlB,QAAQmB,MAAMD,OAYwBhB,UAAU,8BAA5C,mBAIS,KAAZN,QAAoCwB,IAAlBxB,EAAQuB,MAEvB,gCACI,oBAAGjB,UAAU,aAAb,4BAA0CN,EAAQyB,SAASC,KAA3D,IAAkE1B,EAAQyB,SAASE,OAAnF,KAA6FzB,EAA7F,QAA2GF,EAAQ4B,QAAQC,UAAUC,QACrI,oBAAGxB,UAAU,aAAb,yCAAuDN,EAAQ4B,QAAQG,YAAvE,mCAAoH/B,EAAQ4B,QAAQI,YACpI,oBAAG1B,UAAU,aAAb,UAA2BN,EAAQ4B,QAAQG,YAAc,IAAM/B,EAAQ4B,QAAQI,SAAW,GAAK,oDAAsD,0CAArJ,UAKR,mBAAG1B,UAAU,aAAb,2ECtBG2B,MAlBf,WACE,OACE,sBAAM3B,UAAU,MAAhB,SACE,qBAAKA,UAAU,UAAf,SACE,sBAAKC,MAAM,6BAAX,UACE,oBAAIA,MAAM,+BAAV,qDACA,sBAAKA,MAAM,mBAAX,UACA,mBAAGA,MAAM,uBAAT,oMACA,qBAAKA,MAAM,mDAAX,SACE,cAAC,EAAD,iBCAG2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a1d8dcc3.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst GetWeather = () => {\n    const [weather, updateWeather] = useState('');\n    const [zipcode, updateZipcode] = useState();\n    function handleZipcode(e) {\n        updateZipcode(e.target.value)\n \n    }\n    function goGetWeatherAPI () {\n        let url = `https://api.weatherapi.com/v1/current.json?key=9169f0de15b646d7a81172326211407&q=` + zipcode + `&aqi=no`\n        fetch(url)\n        .then (res => res.json())\n        .then (json => {\n            updateWeather(json);\n        })\n        .catch(err => {\n            console.error(err);\n        });\n    }\n\n    console.log(weather)\n   \n    return (\n        <div>\n            <h4 className=\"text-white\">Okay first put in the zip code of the beach you would like to visit</h4>\n            <div class=\"mb-3\">\n                <label htmlFor=\"beachZip\" className=\"form-label text-white\">Beach Zipcode</label>\n                <input type=\"number\" className=\"form-control\" id=\"beachZip\" placeholder=\"zipcode\" value={zipcode} onChange={handleZipcode} />\n                <button onClick={goGetWeatherAPI} className=\"btn btn-primary btn-lg my-4\">Go</button>\n            </div>\n            \n     \n            {weather !== '' && weather.error === undefined ? \n            \n                <div>\n                    <p className=\"text-white\">The Weather in {weather.location.name} {weather.location.region} ({zipcode}) is {weather.current.condition.text}</p>\n                    <p className=\"text-white\">The current temp feels like {weather.current.feelslike_f} degress and has a wind gust of {weather.current.gust_mph}</p>\n                    <p className=\"text-white\">{weather.current.feelslike_f > 80 && weather.current.gust_mph < 10 ? 'Today is a GREAT today to go to the beach! Enjoy!' : 'Today is not a great beach day. Bummer!'} </p>\n                </div>\n            \n            : \n\n            <p className=\"text-white\">Sorry No Beach found with this zipcode, please try again.</p>\n            }\n           \n           \n   \n\n\n            \n            \n            \n        </div>\n    )\n\n}\nexport default GetWeather;","import './App.scss';\nimport GetWeather from './components/GetWeather'\n\nfunction App() {\n  return (\n    <main className=\"app\">\n      <div className=\"overlay\">\n        <div class=\"px-4 py-5 my-5 text-center\">\n          <h1 class=\"display-5 fw-bold text-white\">Is Today a Good Day to go to the Beach?</h1>\n          <div class=\"col-lg-6 mx-auto\">\n          <p class=\"lead mb-4 text-white\">Have you ever thought... \"Hey self, is today a good day to go to the beach?\" Well you are in the right place! Use this handy dandy tool and see if today is a good beach day for you! </p>\n          <div class=\"d-grid gap-2 d-sm-flex justify-content-sm-center\">\n            <GetWeather></GetWeather>\n          </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}